{
  "openapi": "3.1.0",
  "info": {
    "title": "CFW Vue AI API",
    "version": "1.0"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "auth_session"
      }
    },
    "schemas": {
      "AuthLoginResponse": {
        "type": "string"
      },
      "AuthLoginEmailBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AuthLoginUsernameBody": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 20
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "OauthLoginResponse": {
        "type": "string",
        "description": "OAuth redirect HTML"
      },
      "Session": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "user": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "description": "User ID"
              },
              "username": {
                "type": "string",
                "description": "User's username"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "not_set",
                    "guest",
                    "admin",
                    "user"
                  ]
                }
              },
              "userTypes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "not_set",
                    "email",
                    "github",
                    "credentials"
                  ]
                }
              },
              "email_verified": {
                "type": "boolean",
                "description": "Is user email verified"
              },
              "email": {
                "type": "string",
                "description": "User email"
              },
              "avatar_url": {
                "type": "string",
                "description": "User avatar URL"
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "User's name"
              },
              "password": {
                "type": "string",
                "description": "User password"
              }
            },
            "required": [
              "userId",
              "username",
              "roles",
              "userTypes",
              "email_verified"
            ]
          },
          "activePeriodExpiresAt": {
            "type": "string",
            "description": "Session expiry date"
          },
          "idlePeriodExpiresAt": {
            "type": "string",
            "description": "Session expiry date"
          },
          "state": {
            "type": "string",
            "description": "Session state"
          },
          "fresh": {
            "type": "boolean",
            "description": "Is session fresh"
          }
        },
        "required": [
          "sessionId",
          "user",
          "activePeriodExpiresAt",
          "idlePeriodExpiresAt",
          "state",
          "fresh"
        ]
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "code": {
                "type": "number"
              },
              "stack": {
                "type": "string"
              },
              "cause": {
                "type": "string"
              }
            },
            "required": [
              "message",
              "type",
              "code"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "AuthRegisterBody": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 20
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          }
        },
        "required": [
          "username",
          "email",
          "password"
        ]
      },
      "VerifyEmailResponse": {
        "type": "object",
        "properties": {
          "timeSent": {
            "type": "string",
            "description": "Time verification email was sent"
          },
          "expiration": {
            "type": "number",
            "description": "Time verification code expires"
          }
        },
        "required": [
          "timeSent",
          "expiration"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "username": {
            "type": "string",
            "description": "User's username"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "not_set",
                "guest",
                "admin",
                "user"
              ]
            }
          },
          "userTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "not_set",
                "email",
                "github",
                "credentials"
              ]
            }
          },
          "email_verified": {
            "type": "boolean",
            "description": "Is user email verified"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "avatar_url": {
            "type": "string",
            "description": "User avatar URL"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "User's name"
          },
          "password": {
            "type": "string",
            "description": "User password"
          }
        },
        "required": [
          "userId",
          "username",
          "roles",
          "userTypes",
          "email_verified"
        ]
      },
      "TaskListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "page": {
            "type": "number"
          },
          "isCompleted": {
            "type": "boolean"
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "completed": {
                  "type": "boolean"
                },
                "due_date": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "id",
                "name",
                "slug",
                "completed",
                "due_date"
              ]
            }
          }
        },
        "required": [
          "success",
          "page",
          "tasks"
        ]
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "due_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "completed",
          "due_date"
        ]
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "task": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "completed": {
                "type": "boolean"
              },
              "due_date": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "slug",
              "completed",
              "due_date"
            ]
          }
        },
        "required": [
          "success",
          "task"
        ]
      },
      "HealthCheckResponseComponent": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "uptime": {
            "type": "string"
          },
          "worker_env": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "gitInfo": {}
        },
        "required": [
          "status",
          "version",
          "uptime",
          "worker_env",
          "timestamp"
        ]
      },
      "DebugWorkerResponseComponent": {
        "type": "object",
        "properties": {
          "env": {},
          "req": {},
          "cf": {},
          "ctx": {},
          "rawManifest": {
            "type": "string"
          }
        },
        "required": [
          "rawManifest"
        ]
      },
      "MiscDataRequestComponent": {
        "type": "object",
        "properties": {
          "data": {}
        }
      }
    },
    "parameters": {}
  },
  "paths": {
    "/api/auth/login/password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in via your email and password",
        "operationId": "post_LoginPasswordUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AuthLoginEmailBody"
                  },
                  {
                    "$ref": "#/components/schemas/AuthLoginUsernameBody"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redirect URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/oauth": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in via OAuth",
        "operationId": "get_LoginOauth",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "OAuth code"
            },
            "required": true,
            "name": "provider",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "OAuth state"
            },
            "required": false,
            "name": "redirect_url",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth login URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthLoginResponse"
                }
              }
            }
          },
          "302": {
            "description": "Redirect to Request URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/github/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in via OAuth callback",
        "operationId": "get_LoginOauthCallback",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "OAuth code"
            },
            "required": true,
            "name": "code",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "OAuth state"
            },
            "required": true,
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful OAuth login - session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/google/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in via OAuth callback",
        "operationId": "get_LoginOauthCallback",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "OAuth code"
            },
            "required": true,
            "name": "code",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "OAuth state"
            },
            "required": true,
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful OAuth login - session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register/password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user via email and password",
        "operationId": "post_RegisterPasswordUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRegisterBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redirect URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify/email": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Request a verification token",
        "operationId": "get_VerificationEmailGet",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Email address"
            },
            "required": true,
            "name": "email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful email verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify email with code",
        "operationId": "post_VerificationTokenGet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password"
                  },
                  "code": {
                    "type": "number",
                    "description": "Verification code"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful email verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/session": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Fetch a user session",
        "operationId": "get_SessionGet",
        "responses": {
          "200": {
            "description": "Logged in User Session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/session/all": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Fetch all user sessions",
        "operationId": "get_SessionsGet",
        "responses": {
          "200": {
            "description": "List of all user sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sessions not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/user/all": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets a list of all users.",
        "operationId": "get_GetUsers",
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Users not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out",
        "operationId": "get_Logout",
        "responses": {
          "204": {
            "description": "No content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/task/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "List Tasks",
        "operationId": "get_TaskList",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Page number"
            },
            "required": true,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "description": "Number of items per page"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "description": "Filter by completed flag"
            },
            "required": false,
            "name": "isCompleted",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Cursor for pagination"
            },
            "required": false,
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a new Task",
        "operationId": "post_TaskCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created task",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "task": {
                          "$ref": "#/components/schemas/Task"
                        }
                      },
                      "required": [
                        "task"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "result"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/task/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a single Task by id",
        "operationId": "get_TaskFetch",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Task id"
            },
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single task if found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a Task",
        "operationId": "delete_TaskDelete",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Task slug"
            },
            "required": true,
            "name": "taskSlug",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns if the task was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "task": {
                          "$ref": "#/components/schemas/Task"
                        }
                      },
                      "required": [
                        "task"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "result"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/health/check": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get health check",
        "operationId": "get_HealthGet",
        "responses": {
          "200": {
            "description": "Returns health check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponseComponent"
                }
              }
            }
          },
          "404": {
            "description": "Health check not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/health/debug": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get debug info",
        "operationId": "get_DebugGet",
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "description": "Parse KVs - expensive"
            },
            "required": false,
            "name": "parse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns debug info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugWorkerResponseComponent"
                }
              }
            }
          },
          "404": {
            "description": "Debug info not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/json-data": {
      "get": {
        "tags": [
          "Misc"
        ],
        "description": "Get sample data",
        "summary": "Sample data test",
        "operationId": "get_MiscJsonDataGet",
        "responses": {
          "200": {
            "description": "List of sample data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "204": {
            "description": "No content - successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/hello": {
      "get": {
        "tags": [
          "Misc"
        ],
        "description": "Hello world",
        "summary": "Test data in and out",
        "operationId": "get_MiscHelloGet",
        "responses": {
          "200": {
            "description": "Object with hello world data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "204": {
            "description": "No content - successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Misc"
        ],
        "description": "Hello world",
        "summary": "Test data in and out",
        "operationId": "post_MiscHelloPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "object",
                    "properties": {
                      "application/json": {
                        "type": "object",
                        "properties": {
                          "schema": {
                            "$ref": "#/components/schemas/MiscDataRequestComponent"
                          }
                        },
                        "required": [
                          "schema"
                        ]
                      }
                    },
                    "required": [
                      "application/json"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Object with hello world data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "204": {
            "description": "No content - successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/misc": {
      "post": {
        "tags": [
          "Misc"
        ],
        "description": "Miscellaneous data dump",
        "summary": "Test data in and out",
        "operationId": "post_MiscPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "object",
                    "properties": {
                      "application/json": {
                        "type": "object",
                        "properties": {
                          "schema": {
                            "$ref": "#/components/schemas/MiscDataRequestComponent"
                          }
                        },
                        "required": [
                          "schema"
                        ]
                      }
                    },
                    "required": [
                      "application/json"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Object with hello world data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "204": {
            "description": "No content - successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/todos": {
      "get": {
        "tags": [
          "Misc"
        ],
        "description": "Get todos",
        "summary": "Todos test",
        "operationId": "get_MiscTodosGet",
        "responses": {
          "200": {
            "description": "List of todos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "204": {
            "description": "No content - successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {}
}